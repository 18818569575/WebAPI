select * from (
    select c.CONCEPT_ID, CONCEPT_NAME, CONCEPT_CODE, CONCEPT_CLASS_ID, DOMAIN_ID, VOCABULARY_NAME,c.VOCABULARY_ID, RELATIONSHIP_NAME, 1 RELATIONSHIP_DISTANCE
    from CONCEPT_RELATIONSHIP cr 
    join CONCEPT c on cr.CONCEPT_ID_2 = c.CONCEPT_ID 
    join RELATIONSHIP r on cr.RELATIONSHIP_ID = r.RELATIONSHIP_ID 
    join VOCABULARY v on c.VOCABULARY_ID = v.VOCABULARY_ID 
    where cr.CONCEPT_ID_1 = @id
    and c.INVALID_REASON IS NULL 
    union 
    select ANCESTOR_CONCEPT_ID, CONCEPT_NAME, CONCEPT_CODE, CONCEPT_CLASS_ID, DOMAIN_ID, VOCABULARY_NAME VOCABULARY,c.VOCABULARY_ID, 'Ancestor' , MIN_LEVELS_OF_SEPARATION RELATIONSHIP_DISTANCE  
    from CONCEPT_ANCESTOR ca 
    join CONCEPT c on c.CONCEPT_ID = ca.ANCESTOR_CONCEPT_ID 
    join VOCABULARY v on c.VOCABULARY_ID = v.VOCABULARY_ID 
    where DESCENDANT_CONCEPT_ID = @id
    and ANCESTOR_CONCEPT_ID <> @id
    and c.INVALID_REASON IS NULL 
    union 
    select DESCENDANT_CONCEPT_ID, CONCEPT_NAME, CONCEPT_CODE, CONCEPT_CLASS_ID, DOMAIN_ID, VOCABULARY_NAME VOCABULARY, c.VOCABULARY_ID, 'Descendant' , MIN_LEVELS_OF_SEPARATION RELATIONSHIP_DISTANCE  
    from CONCEPT_ANCESTOR ca 
    join CONCEPT c on c.CONCEPT_ID = ca.DESCENDANT_CONCEPT_ID 
    join VOCABULARY v on c.VOCABULARY_ID = v.VOCABULARY_ID 
    where ANCESTOR_CONCEPT_ID = @id
    and DESCENDANT_CONCEPT_ID <> @id
    and c.INVALID_REASON IS NULL 
) as ALL_RELATED 
order by RELATIONSHIP_DISTANCE ASC
